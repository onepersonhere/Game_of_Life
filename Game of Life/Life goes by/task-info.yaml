type: edu
custom_name: stage3
files:
- name: src/life/Main.java
  visible: true
  text: |
    package life;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/GameOfLifeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.List;


    public class GameOfLifeTest extends StageTest<String> {

        int[] sizes = {5, 6, 7, 8, 9, 10};

        @DynamicTest(data = "sizes")
        CheckResult test(int size) {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute(String.valueOf(size));

            if (output.isEmpty()) {
                return CheckResult.wrong("Looks like your output is empty!");
            }

            if (!output.toLowerCase().contains("generation")) {
                return CheckResult.wrong("Can't find 'Generation' word in the output!");
            }

            String[] generations = output.toLowerCase().split("generation");

            if (generations.length < 11) {
                return CheckResult.wrong("Your output should contain not less than 10 generations!");
            }

            List<Generation> generationsList = Generation.getGenerations(generations, size);

            Generation.isCorrectGenerationsList(generationsList);

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: test/Generation.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;
    import java.util.stream.Collectors;

    public class Generation {

        private static final Pattern pattern = Pattern.compile("alive:(\\s+)?(\\d+)", Pattern.MULTILINE);
        private final boolean[][] cells;
        private final int size;


        public Generation(List<String> lines) {

            size = lines.size();
            cells = new boolean[size][size];

            for (int i = 0; i < lines.size(); i++) {
                for (int j = 0; j < lines.size(); j++) {
                    cells[i][j] = lines.get(i).charAt(j) == 'o';
                }
            }
        }

        public static List<Generation> getGenerations(String[] generationsFromOutput, int correctSize) {

            List<Generation> generations = new ArrayList<>();

            for (int i = 1; i < generationsFromOutput.length; i++) {
                String generation = generationsFromOutput[i].toLowerCase();

                Matcher matcher = pattern.matcher(generation);

                if (!matcher.find()) {
                    throw new WrongAnswer("Can't find number of Alive cells in the generation with number "
                            + (i + 1) + ".\nYour output should contain 'Alive: DDD', where D is a digit!");
                }

                int aliveFromOutput = Integer.parseInt(matcher.group(2));

                List<String> lines = Arrays.stream(generation.split("\n"))
                        .filter(line -> !line.contains("alive") && !line.contains("#") && !line.isEmpty())
                        .collect(Collectors.toList());

                if (lines.size() != correctSize) {
                    throw new WrongAnswer("Generation #" + (i + 1) + " map size is wrong!\nYour size: " + lines.size() + "\n" +
                            "Expected size: " + correctSize);
                }

                int activeCellsInGeneration = (int) lines.stream().map(line -> line.split("")).flatMap(cells -> Arrays.stream(cells.clone())).filter(cell -> cell.equals("o")).count();

                if (activeCellsInGeneration != aliveFromOutput) {
                    throw new WrongAnswer("Active cells in the generation #" + (i + 1) + ": " + activeCellsInGeneration + "\n" +
                            "Your output: 'Alive: " + aliveFromOutput + "'");
                }

                for (String line : lines) {
                    if (line.length() != correctSize) {
                        throw new WrongAnswer("Generation map size is wrong!\nYour size: " + lines.size() + "\n" +
                                "Expected size: " + correctSize + "\nMake sure you don't print extra spaces at the end of the lines!");
                    }
                }

                generations.add(new Generation(lines));
            }

            return generations;
        }

        public boolean isCorrectNextGeneration(Generation generation) {

            if (generation.size != size) {
                return false;
            }

            for (int i = 0; i < size; i++) {
                for (int j = 0; j < size; j++) {

                    int numberOfNeighbours = 0;

                    int up = i - 1 < 0 ? size - 1 : i - 1;
                    int down = i + 1 == size ? 0 : i + 1;
                    int right = j + 1 == size ? 0 : j + 1;
                    int left = j - 1 < 0 ? size - 1 : j - 1;

                    if (cells[up][left]) numberOfNeighbours++;
                    if (cells[up][j]) numberOfNeighbours++;
                    if (cells[up][right]) numberOfNeighbours++;
                    if (cells[i][left]) numberOfNeighbours++;
                    if (cells[i][right]) numberOfNeighbours++;
                    if (cells[down][left]) numberOfNeighbours++;
                    if (cells[down][j]) numberOfNeighbours++;
                    if (cells[down][right]) numberOfNeighbours++;

                    if ((numberOfNeighbours < 2 || numberOfNeighbours > 3) && generation.cells[i][j]) {
                        return false;
                    }
                }
            }
            return true;
        }


        public static void isCorrectGenerationsList(List<Generation> generations) {

            if (generations.size() <= 1) {
                return;
            }

            for (int i = 1; i < generations.size(); i++) {
                if (!generations.get(i - 1).isCorrectNextGeneration(generations.get(i))) {
                    throw new WrongAnswer("Generation #" + (i + 1) + " is wrong!");
                }
            }
        }
    }
  learner_created: false
- name: src/life/Universe.java
  visible: true
  text: |
    package life;

    import java.util.Arrays;
    import java.util.Random;
    import java.util.Scanner;

    public class Universe {
        private static int[][] universe;
        private static int universe_size;
        private static long seed;
        private static int M;

        public Universe(){
            setup();
            populateUniverse();
            //System.out.println("Original Generation:");
            //printUniverse();
            new Generation();
            printUniverse();
        }

        private static void setup(){
            System.out.println("Please input universe parameters:");
            Scanner scanner = new Scanner(System.in);
            universe_size = scanner.nextInt();
            seed = scanner.nextLong();
            M = scanner.nextInt(); //num of gens
            universe = new int[universe_size][universe_size];
            for(int[] i: universe){
                Arrays.fill(i, 1);
            }
        }
        private static void populateUniverse(){
            Random rand = new Random(seed);
            for(int i = 0; i < universe_size; i++) {
                for (int j = 0; j < universe_size; j++) {
                    if(rand.nextBoolean()){
                        universe[i][j] = 0;
                    }
                }
            }
        }
        public static void printUniverse(){
            for(int i = 0; i < universe_size; i++){
                for (int j = 0; j < universe_size; j++){
                    if(universe[i][j] == 0){
                        System.out.print("O");//alive
                    }else if(universe[i][j] == 1){
                        System.out.print(" ");//dead
                    }
                }
                System.out.println();
            }
        }

        public static int[][] getUniverse() {
            return universe;
        }

        public static int getM() {
            return M;
        }

        public static int getUniverse_size() {
            return universe_size;
        }

        public static void setUniverse(int[][] universe) {
            Universe.universe = universe;
        }
    }
  learner_created: true
- name: src/life/Generation.java
  visible: true
  text: |
    package life;
    import java.util.Arrays;

    import static life.Universe.printUniverse;

    public class Generation {
        private static int[][] universe = Universe.getUniverse();
        private static int size = Universe.getUniverse_size();
        private static int M = Universe.getM();
        public Generation(){
            for(int i = 0; i < M; i++){
                Universe.setUniverse(evolution());
                universe = Universe.getUniverse();

                //System.out.println("New Generation:");
                //printUniverse();
            }

        }
        private int[][] evolution(){
            int[][] newUniverse = new int[size][size];
            for(int i = 0; i < size; i++){
                for(int j = 0; j < size; j++){
                    int[] cell = new int[]{i, j};
                    int neighboursAlive = cellDetector(cell);
                    //System.out.println("for cell: "+ Arrays.toString(cell)+" "+ neighboursAlive); //test with 3 36 err here
                    if(cellCondition(neighboursAlive, cell)){
                        newUniverse[i][j] = 0;//alive
                    }else{
                        newUniverse[i][j] = 1;//dead
                    }
                }
            }
            return newUniverse;
        }
        private boolean cellCondition(int neighboursAlive, int[] cell){
            int cellinUniverse = universe[cell[0]][cell[1]];
            if(cellinUniverse == 0 && (neighboursAlive == 2 || neighboursAlive == 3)){
                return true;
            }else if(cellinUniverse == 1 && neighboursAlive == 3){
                return true;
            }
            return false;
        }
        //correct
        private int cellDetector(int[] cell){
            //if not border cell
            int i = cell[0];
            int j = cell[1];
            int neighboursAlive = 0;
            if(i < size - 1 && i > 0
                    && j < size - 1 && j > 0){
                if(universe[i-1][j] == 0) neighboursAlive++;//N
                if(universe[i-1][j+1] == 0) neighboursAlive++;//NE
                if(universe[i+1][j] == 0) neighboursAlive++;//S
                if(universe[i][j+1] == 0) neighboursAlive++;//E
                if(universe[i+1][j+1] == 0) neighboursAlive++;//SE
                if(universe[i-1][j-1] == 0) neighboursAlive++;//NW
                if(universe[i][j-1] == 0) neighboursAlive++;//W
                if(universe[i+1][j-1] == 0) neighboursAlive++;//SW

            }else if(i == 0 && j > 0 && j < size - 1){
                //top row
                if(universe[i][j-1] == 0) neighboursAlive++;//W
                if(universe[i+1][j-1] == 0) neighboursAlive++;//SW
                if(universe[i+1][j] == 0) neighboursAlive++;//S
                if(universe[i+1][j+1] == 0) neighboursAlive++;//SE
                if(universe[i][j+1] == 0) neighboursAlive++;//E

                if(universe[size-1][j] == 0) neighboursAlive++;//N
                if(universe[size-1][j + 1] == 0) neighboursAlive++;//NE
                if(universe[size-1][j - 1] == 0) neighboursAlive++;//NW

            }else if(i == size - 1 && j > 0 && j < size - 1){
                //bottom row
                if(universe[i-1][j] == 0) neighboursAlive++;//N
                if(universe[i-1][j-1] == 0) neighboursAlive++;//NW
                if(universe[i-1][j+1] == 0) neighboursAlive++;//NE
                if(universe[i][j+1] == 0) neighboursAlive++;//E
                if(universe[i][j-1] == 0) neighboursAlive++;//W

                if(universe[0][j] == 0) neighboursAlive++;//S
                if(universe[0][j + 1] == 0) neighboursAlive++;//SE
                if(universe[0][j - 1] == 0) neighboursAlive++;//SW

            }else if(i > 0 && i < size - 1 && j == 0){
                //first column
                if(universe[i+1][j] == 0) neighboursAlive++;//S
                if(universe[i-1][j] == 0) neighboursAlive++;//N
                if(universe[i+1][j+1] == 0) neighboursAlive++;//SE
                if(universe[i-1][j+1] == 0) neighboursAlive++;//NE
                if(universe[i][j+1] == 0) neighboursAlive++;//E

                if(universe[i+1][size-1] == 0) neighboursAlive++;//SW
                if(universe[i][size-1] == 0) neighboursAlive++;//W
                if(universe[i-1][size-1] == 0) neighboursAlive++;//NW

            }else if(i > 0 && i < size - 1 && j == size - 1){
                //last column
                if(universe[i+1][j] == 0) neighboursAlive++;//S
                if(universe[i-1][j] == 0) neighboursAlive++;//N
                if(universe[i-1][j-1] == 0) neighboursAlive++;//NW
                if(universe[i+1][j-1] == 0) neighboursAlive++;//SW
                if(universe[i][j-1] == 0) neighboursAlive++;//W

                if(universe[i+1][0] == 0) neighboursAlive++;//SE
                if(universe[i][0] == 0) neighboursAlive++;//E
                if(universe[i-1][0] == 0) neighboursAlive++;//NE

            }else if(i == 0 && j == 0){
                //up left corner
                if(universe[i+1][j] == 0) neighboursAlive++;//S
                if(universe[i+1][j+1] == 0) neighboursAlive++;//SE
                if(universe[i][j+1] == 0) neighboursAlive++;//E

                if(universe[size-1][0] == 0) neighboursAlive++;//N
                if(universe[size-1][1] == 0) neighboursAlive++;//NE
                if(universe[size-1][size-1] == 0) neighboursAlive++;//NW
                if(universe[i][size-1] == 0) neighboursAlive++;//W
                if(universe[i+1][size-1] == 0) neighboursAlive++;//SW

            }else if(i == 0 && j == size - 1){
                //up right corner
                if(universe[i][j-1] == 0) neighboursAlive++;//W
                if(universe[i+1][j-1] == 0) neighboursAlive++;//SW
                if(universe[i+1][j] == 0) neighboursAlive++;//S

                if(universe[0][0] == 0) neighboursAlive++;//E
                if(universe[1][0] == 0) neighboursAlive++;//SE
                if(universe[size-1][size-1] == 0) neighboursAlive++;//N
                if(universe[size-1][size-2] == 0) neighboursAlive++;//NW
                if(universe[size-1][0] == 0) neighboursAlive++;//NE

            }else if(i == size - 1 && j == 0){
                //bottom left corner
                if(universe[i-1][j+1] == 0) neighboursAlive++;//NE
                if(universe[i][j+1] == 0) neighboursAlive++;//E
                if(universe[i-1][j] == 0) neighboursAlive++;//N

                if(universe[0][size-1] == 0) neighboursAlive++;//SW
                if(universe[0][0] == 0) neighboursAlive++;//S
                if(universe[0][1] == 0) neighboursAlive++;//SE
                if(universe[size-2][size-1] == 0) neighboursAlive++;//NW
                if(universe[size-1][size-1] == 0) neighboursAlive++;//W

            }else if(i == size - 1 && j == size - 1){
                //bottom right corner
                if(universe[i-1][j] == 0) neighboursAlive++;//N
                if(universe[i-1][j-1] == 0) neighboursAlive++;//NW
                if(universe[i][j-1] == 0) neighboursAlive++;//W

                if(universe[0][size-2] == 0) neighboursAlive++;//SW
                if(universe[0][size-1] == 0) neighboursAlive++;//S
                if(universe[0][0] == 0) neighboursAlive++;//SE
                if(universe[size-2][0] == 0) neighboursAlive++;//NE
                if(universe[size-1][0] == 0) neighboursAlive++;//E
            }
            return neighboursAlive;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/54/stages/296/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Wed, 23 Jun 2021 02:47:14 UTC
record: 3
