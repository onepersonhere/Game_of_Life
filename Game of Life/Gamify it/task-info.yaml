type: edu
custom_name: stage5
files:
- name: src/life/Main.java
  visible: true
  text: |
    package life;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/GameOfLifeTest.java
  visible: false
  text: |
    import life.GameOfLife;
    import org.assertj.swing.fixture.JButtonFixture;
    import org.assertj.swing.fixture.JLabelFixture;
    import org.assertj.swing.fixture.JToggleButtonFixture;
    import org.hyperskill.hstest.common.Utils;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.SwingTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.swing.SwingComponent;

    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    import static org.hyperskill.hstest.testcase.CheckResult.correct;
    import static org.hyperskill.hstest.testcase.CheckResult.wrong;

    public class GameOfLifeTest extends SwingTest {

        public GameOfLifeTest() {
            super(new GameOfLife());
        }

        @SwingComponent(name = "GenerationLabel")
        JLabelFixture generationLabel;

        @SwingComponent(name = "AliveLabel")
        JLabelFixture aliveLabel;

        @SwingComponent(name = "PlayToggleButton")
        JToggleButtonFixture playButton;

        @SwingComponent(name = "ResetButton")
        JButtonFixture resetButton;

        @DynamicTest(order = 1)
        CheckResult testWindow() {
            requireVisible(window);
            return correct();
        }

        @DynamicTest(order = 2)
        CheckResult testGenerationLabel() {
            requireEnabled(generationLabel);
            requireVisible(generationLabel);
            return correct();
        }

        @DynamicTest(order = 3)
        CheckResult testAliveLabel() {
            requireEnabled(aliveLabel);
            requireVisible(aliveLabel);
            return correct();
        }

        @DynamicTest(order = 4)
        CheckResult testForIntegerInLabels() {

            Pattern pattern = Pattern.compile("\\d+");
            Matcher matcher = pattern.matcher(generationLabel.text());

            if (!matcher.find()) {
                return wrong("The 'GenerationLabel' doesn't contain an integer number!");
            }

            matcher = pattern.matcher(aliveLabel.text());

            if (!matcher.find()) {
                return wrong("The 'AliveLabel' doesn't contain an integer number!");
            }

            return correct();
        }

        @DynamicTest(order = 5)
        CheckResult testPlayButton() {
            requireEnabled(playButton);
            requireVisible(playButton);
            playButton.click();
            playButton.click();
            return correct();
        }

        @DynamicTest(order = 6)
        CheckResult testResetButton() {
            requireEnabled(resetButton);
            requireVisible(resetButton);
            resetButton.click();
            return correct();
        }

        @DynamicTest(order = 7)
        CheckResult testButtonsActions() {

            playButton.uncheck();
            resetButton.click();

            int firstGenerationNumber = getNumberFromLabel(generationLabel);
            Utils.sleep(200);
            int secondGenerationNumber = getNumberFromLabel(generationLabel);

            if (firstGenerationNumber != secondGenerationNumber) {
                return wrong("When PlayToggleButton is not toggled the program shouldn't generate new generations! The number in GenerationLabel shouldn't change!");
            }

            resetButton.click();
            firstGenerationNumber = getNumberFromLabel(generationLabel);
            playButton.check();
            Utils.sleep(200);
            secondGenerationNumber = getNumberFromLabel(generationLabel);

            if (firstGenerationNumber == secondGenerationNumber) {
                return wrong("When PlayToggleButton is toggled the program should generate new generations! The number in GenerationLabel should change!\n" +
                        "Also make sure your program doesn't sleep more than 150 ms after each generation!");
            }

            return correct();
        }

        private static int getNumberFromLabel(JLabelFixture labelFixture) {
            Pattern pattern = Pattern.compile("\\d+");
            Matcher matcher = pattern.matcher(labelFixture.text());

            System.out.println(labelFixture.text());

            if (!matcher.find()) {
                throw new WrongAnswer("Can't find a number in the '" + labelFixture.text() + "'!");
            }

            return Integer.parseInt(matcher.group());
        }
    }
  learner_created: false
- name: src/life/Universe.java
  visible: true
  text: |
    package life;

    import java.util.Arrays;
    import java.util.Random;
    import java.util.Scanner;

    public class Universe {
        private static int[][] universe;
        private static int universe_size = 20;
        private static long seed;
        private static int M;

        public Universe() throws InterruptedException {
            setup();
            populateUniverse();
            new GameOfLife();
            //System.out.println("Original Generation:");
            //printUniverse();
            new Generation();
            //printUniverse();
        }

        private static void setup(){
            //System.out.println("Please input universe parameters:");
            Scanner scanner = new Scanner(System.in);
            universe_size = 20; //scanner.nextInt();
            //seed = scanner.nextLong();
            //M = scanner.nextInt(); //num of gens
            universe = new int[universe_size][universe_size];
            for(int[] i: universe){
                Arrays.fill(i, 1);
            }
        }
        private static void populateUniverse(){
            Random rand = new Random();
            for(int i = 0; i < universe_size; i++) {
                for (int j = 0; j < universe_size; j++) {
                    if(rand.nextBoolean()){
                        universe[i][j] = 0;
                    }
                }
            }
        }
        public static void printUniverse(){
            for(int i = 0; i < universe_size; i++){
                for (int j = 0; j < universe_size; j++){
                    if(universe[i][j] == 0){
                        System.out.print("O");//alive
                    }else if(universe[i][j] == 1){
                        System.out.print(" ");//dead
                    }
                }
                System.out.println();
            }
        }

        public static int[][] getUniverse() {
            return universe;
        }

        //public static int getM() {
        //    return M;
        //}

        public static int getUniverse_size() {
            return universe_size;
        }

        public static void setUniverse(int[][] universe) {
            Universe.universe = universe;
        }
    }
  learner_created: true
- name: src/life/GameOfLife.java
  visible: true
  text: |
    package life;

    import javax.swing.*;
    import java.awt.*;

    public class GameOfLife extends JFrame {
        private static JLabel GLabel = new JLabel();
        private static JLabel ALabel = new JLabel();
        private static JPanel Panel = new JPanel();

        public GameOfLife() {
            setTitle("Game of Life");
            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            setSize(516, 579);
            setLayout(null);
            setLocationRelativeTo(null);
            GenerationLabel();
            AliveLabel();
            GamePanel();
            setVisible(true);
        }
        private void GamePanel(){
            Panel = new GamePanel();
            add(Panel);
        }

        private void GenerationLabel(){
            GLabel.setName("GenerationLabel");
            GLabel.setText("Generation #0");
            GLabel.setBounds(5,0,100,20);
            add(GLabel);
        }
        private void AliveLabel(){
            ALabel.setName("AliveLabel");
            ALabel.setText("Alive: 0");
            ALabel.setBounds(5,20,100,20);
            add(ALabel);
        }

        public static JLabel getALabel() {
            return ALabel;
        }

        public static JLabel getGLabel() {
            return GLabel;
        }
    }
  learner_created: true
- name: src/life/Generation.java
  visible: true
  text: |
    package life;
    import java.io.IOException;
    import java.util.Arrays;

    import static life.Universe.printUniverse;

    public class Generation {
        private static int[][] universe = Universe.getUniverse();
        private static int size = Universe.getUniverse_size();
        private static int M;
        public Generation() throws InterruptedException {
            M = 0;
            while(true){
                M++;
                Universe.setUniverse(evolution());
                universe = Universe.getUniverse();
                GUIoutput();
                //consoleOutput();
                //System.out.println("New Generation:");
                //printUniverse();
                if(M == 20) break;
                Thread.sleep(1000);
            }

        }
        private void GUIoutput(){
            GameOfLife.getGLabel().setText("Generation #" + M);
            GameOfLife.getALabel().setText("Alive: " + countAlive());
        }
        private void consoleOutput(){
            //clear console first
            /*
            try {
                if (System.getProperty("os.name").contains("Windows"))
                    new ProcessBuilder("cmd","/c","cls").inheritIO().start().waitFor();
                else
                    Runtime.getRuntime().exec("clear");
            }
            catch (IOException | InterruptedException ignored) {}*/
            //print out the statistics
            System.out.println("Generation #" + M);
            System.out.println("Alive: " + countAlive());
            printUniverse();
        }
        public int countAlive(){
            int alive = 0;
            for(int i = 0; i < size; i++){
                for(int j = 0; j < size; j++){
                    if(universe[i][j] == 0){
                        alive++;
                    }
                }
            }
            return alive;
        }

        private int[][] evolution(){
            int[][] newUniverse = new int[size][size];
            for(int i = 0; i < size; i++){
                for(int j = 0; j < size; j++){
                    int[] cell = new int[]{i, j};
                    int neighboursAlive = cellDetector(cell);
                    //System.out.println("for cell: "+ Arrays.toString(cell)+" "+ neighboursAlive); //test with 3 36 err here
                    if(cellCondition(neighboursAlive, cell)){
                        newUniverse[i][j] = 0;//alive
                    }else{
                        newUniverse[i][j] = 1;//dead
                    }
                }
            }
            return newUniverse;
        }
        private boolean cellCondition(int neighboursAlive, int[] cell){
            int cellinUniverse = universe[cell[0]][cell[1]];
            if(cellinUniverse == 0 && (neighboursAlive == 2 || neighboursAlive == 3)){
                return true;
            }else if(cellinUniverse == 1 && neighboursAlive == 3){
                return true;
            }
            return false;
        }
        //correct
        private int cellDetector(int[] cell){
            //if not border cell
            int i = cell[0];
            int j = cell[1];
            int neighboursAlive = 0;
            if(i < size - 1 && i > 0
                    && j < size - 1 && j > 0){
                if(universe[i-1][j] == 0) neighboursAlive++;//N
                if(universe[i-1][j+1] == 0) neighboursAlive++;//NE
                if(universe[i+1][j] == 0) neighboursAlive++;//S
                if(universe[i][j+1] == 0) neighboursAlive++;//E
                if(universe[i+1][j+1] == 0) neighboursAlive++;//SE
                if(universe[i-1][j-1] == 0) neighboursAlive++;//NW
                if(universe[i][j-1] == 0) neighboursAlive++;//W
                if(universe[i+1][j-1] == 0) neighboursAlive++;//SW

            }else if(i == 0 && j > 0 && j < size - 1){
                //top row
                if(universe[i][j-1] == 0) neighboursAlive++;//W
                if(universe[i+1][j-1] == 0) neighboursAlive++;//SW
                if(universe[i+1][j] == 0) neighboursAlive++;//S
                if(universe[i+1][j+1] == 0) neighboursAlive++;//SE
                if(universe[i][j+1] == 0) neighboursAlive++;//E

                if(universe[size-1][j] == 0) neighboursAlive++;//N
                if(universe[size-1][j + 1] == 0) neighboursAlive++;//NE
                if(universe[size-1][j - 1] == 0) neighboursAlive++;//NW

            }else if(i == size - 1 && j > 0 && j < size - 1){
                //bottom row
                if(universe[i-1][j] == 0) neighboursAlive++;//N
                if(universe[i-1][j-1] == 0) neighboursAlive++;//NW
                if(universe[i-1][j+1] == 0) neighboursAlive++;//NE
                if(universe[i][j+1] == 0) neighboursAlive++;//E
                if(universe[i][j-1] == 0) neighboursAlive++;//W

                if(universe[0][j] == 0) neighboursAlive++;//S
                if(universe[0][j + 1] == 0) neighboursAlive++;//SE
                if(universe[0][j - 1] == 0) neighboursAlive++;//SW

            }else if(i > 0 && i < size - 1 && j == 0){
                //first column
                if(universe[i+1][j] == 0) neighboursAlive++;//S
                if(universe[i-1][j] == 0) neighboursAlive++;//N
                if(universe[i+1][j+1] == 0) neighboursAlive++;//SE
                if(universe[i-1][j+1] == 0) neighboursAlive++;//NE
                if(universe[i][j+1] == 0) neighboursAlive++;//E

                if(universe[i+1][size-1] == 0) neighboursAlive++;//SW
                if(universe[i][size-1] == 0) neighboursAlive++;//W
                if(universe[i-1][size-1] == 0) neighboursAlive++;//NW

            }else if(i > 0 && i < size - 1 && j == size - 1){
                //last column
                if(universe[i+1][j] == 0) neighboursAlive++;//S
                if(universe[i-1][j] == 0) neighboursAlive++;//N
                if(universe[i-1][j-1] == 0) neighboursAlive++;//NW
                if(universe[i+1][j-1] == 0) neighboursAlive++;//SW
                if(universe[i][j-1] == 0) neighboursAlive++;//W

                if(universe[i+1][0] == 0) neighboursAlive++;//SE
                if(universe[i][0] == 0) neighboursAlive++;//E
                if(universe[i-1][0] == 0) neighboursAlive++;//NE

            }else if(i == 0 && j == 0){
                //up left corner
                if(universe[i+1][j] == 0) neighboursAlive++;//S
                if(universe[i+1][j+1] == 0) neighboursAlive++;//SE
                if(universe[i][j+1] == 0) neighboursAlive++;//E

                if(universe[size-1][0] == 0) neighboursAlive++;//N
                if(universe[size-1][1] == 0) neighboursAlive++;//NE
                if(universe[size-1][size-1] == 0) neighboursAlive++;//NW
                if(universe[i][size-1] == 0) neighboursAlive++;//W
                if(universe[i+1][size-1] == 0) neighboursAlive++;//SW

            }else if(i == 0 && j == size - 1){
                //up right corner
                if(universe[i][j-1] == 0) neighboursAlive++;//W
                if(universe[i+1][j-1] == 0) neighboursAlive++;//SW
                if(universe[i+1][j] == 0) neighboursAlive++;//S

                if(universe[0][0] == 0) neighboursAlive++;//E
                if(universe[1][0] == 0) neighboursAlive++;//SE
                if(universe[size-1][size-1] == 0) neighboursAlive++;//N
                if(universe[size-1][size-2] == 0) neighboursAlive++;//NW
                if(universe[size-1][0] == 0) neighboursAlive++;//NE

            }else if(i == size - 1 && j == 0){
                //bottom left corner
                if(universe[i-1][j+1] == 0) neighboursAlive++;//NE
                if(universe[i][j+1] == 0) neighboursAlive++;//E
                if(universe[i-1][j] == 0) neighboursAlive++;//N

                if(universe[0][size-1] == 0) neighboursAlive++;//SW
                if(universe[0][0] == 0) neighboursAlive++;//S
                if(universe[0][1] == 0) neighboursAlive++;//SE
                if(universe[size-2][size-1] == 0) neighboursAlive++;//NW
                if(universe[size-1][size-1] == 0) neighboursAlive++;//W

            }else if(i == size - 1 && j == size - 1){
                //bottom right corner
                if(universe[i-1][j] == 0) neighboursAlive++;//N
                if(universe[i-1][j-1] == 0) neighboursAlive++;//NW
                if(universe[i][j-1] == 0) neighboursAlive++;//W

                if(universe[0][size-2] == 0) neighboursAlive++;//SW
                if(universe[0][size-1] == 0) neighboursAlive++;//S
                if(universe[0][0] == 0) neighboursAlive++;//SE
                if(universe[size-2][0] == 0) neighboursAlive++;//NE
                if(universe[size-1][0] == 0) neighboursAlive++;//E
            }
            return neighboursAlive;
        }
    }
  learner_created: true
- name: src/life/GamePanel.java
  visible: true
  text: |
    package life;

    import javax.swing.*;
    import java.awt.*;

    public class GamePanel extends JPanel {
        private static int size = Universe.getUniverse_size();
        private static int[][] universe = Universe.getUniverse();
        public GamePanel(){
            setBounds(0, 40, 500, 500);
            setBackground(Color.white);
        }
        public void paint(Graphics g){
            super.paint(g);
            //500w && 500h
            int WIDTH = 500/size;
            int HEIGHT = 500/size;
            for ( int x = 0; x <= 500; x += WIDTH ) {
                for (int y = 0; y <= 500; y += HEIGHT) {
                    g.drawRect(x, y, WIDTH, HEIGHT);
                }
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/54/stages/299/implement#comment
status: Solved
feedback:
  message: Well done! You finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Thu, 24 Jun 2021 00:56:20 UTC
record: 5
